{"version":3,"file":"frappe-gantt.min.js","sources":["../src/date_utils.js","../src/svg_utils.js","../src/bar.js","../src/arrow.js","../src/popup.js","../src/index.js"],"sourcesContent":["const YEAR = 'year';\nconst MONTH = 'month';\nconst DAY = 'day';\nconst HOUR = 'hour';\nconst MINUTE = 'minute';\nconst SECOND = 'second';\nconst MILLISECOND = 'millisecond';\n\nconst month_names = {\n    en: [\n        'January',\n        'February',\n        'March',\n        'April',\n        'May',\n        'June',\n        'July',\n        'August',\n        'September',\n        'October',\n        'November',\n        'December',\n    ],\n    es: [\n        'Enero',\n        'Febrero',\n        'Marzo',\n        'Abril',\n        'Mayo',\n        'Junio',\n        'Julio',\n        'Agosto',\n        'Septiembre',\n        'Octubre',\n        'Noviembre',\n        'Diciembre',\n    ],\n    ru: [\n        'Январь',\n        'Февраль',\n        'Март',\n        'Апрель',\n        'Май',\n        'Июнь',\n        'Июль',\n        'Август',\n        'Сентябрь',\n        'Октябрь',\n        'Ноябрь',\n        'Декабрь',\n    ],\n    ptBr: [\n        'Janeiro',\n        'Fevereiro',\n        'Março',\n        'Abril',\n        'Maio',\n        'Junho',\n        'Julho',\n        'Agosto',\n        'Setembro',\n        'Outubro',\n        'Novembro',\n        'Dezembro',\n    ],\n    fr: [\n        'Janvier',\n        'Février',\n        'Mars',\n        'Avril',\n        'Mai',\n        'Juin',\n        'Juillet',\n        'Août',\n        'Septembre',\n        'Octobre',\n        'Novembre',\n        'Décembre',\n    ],\n    tr: [\n        'Ocak',\n        'Şubat',\n        'Mart',\n        'Nisan',\n        'Mayıs',\n        'Haziran',\n        'Temmuz',\n        'Ağustos',\n        'Eylül',\n        'Ekim',\n        'Kasım',\n        'Aralık',\n    ],\n    zh: [\n        '一月',\n        '二月',\n        '三月',\n        '四月',\n        '五月',\n        '六月',\n        '七月',\n        '八月',\n        '九月',\n        '十月',\n        '十一月',\n        '十二月',\n    ],\n};\n\nexport default {\n    parse(date, date_separator = '-', time_separator = /[.:]/) {\n        if (date instanceof Date) {\n            return date;\n        }\n        if (typeof date === 'string') {\n            let date_parts, time_parts;\n            const parts = date.split(' ');\n\n            date_parts = parts[0]\n                .split(date_separator)\n                .map((val) => parseInt(val, 10));\n            time_parts = parts[1] && parts[1].split(time_separator);\n\n            // month is 0 indexed\n            date_parts[1] = date_parts[1] - 1;\n\n            let vals = date_parts;\n\n            if (time_parts && time_parts.length) {\n                if (time_parts.length == 4) {\n                    time_parts[3] = '0.' + time_parts[3];\n                    time_parts[3] = parseFloat(time_parts[3]) * 1000;\n                }\n                vals = vals.concat(time_parts);\n            }\n\n            return new Date(...vals);\n        }\n    },\n\n    to_string(date, with_time = false) {\n        if (!(date instanceof Date)) {\n            throw new TypeError('Invalid argument type');\n        }\n        const vals = this.get_date_values(date).map((val, i) => {\n            if (i === 1) {\n                // add 1 for month\n                val = val + 1;\n            }\n\n            if (i === 6) {\n                return padStart(val + '', 3, '0');\n            }\n\n            return padStart(val + '', 2, '0');\n        });\n        const date_string = `${vals[0]}-${vals[1]}-${vals[2]}`;\n        const time_string = `${vals[3]}:${vals[4]}:${vals[5]}.${vals[6]}`;\n\n        return date_string + (with_time ? ' ' + time_string : '');\n    },\n\n    format(date, format_string = 'YYYY-MM-DD HH:mm:ss.SSS', lang = 'en') {\n        const values = this.get_date_values(date).map((d) => padStart(d, 2, 0));\n        const format_map = {\n            YYYY: values[0],\n            MM: padStart(+values[1] + 1, 2, 0),\n            DD: values[2],\n            HH: values[3],\n            mm: values[4],\n            ss: values[5],\n            SSS: values[6],\n            D: values[2],\n            MMMM: month_names[lang][+values[1]],\n            MMM: month_names[lang][+values[1]],\n        };\n\n        let str = format_string;\n        const formatted_values = [];\n\n        Object.keys(format_map)\n            .sort((a, b) => b.length - a.length) // big string first\n            .forEach((key) => {\n                if (str.includes(key)) {\n                    str = str.replace(key, `$${formatted_values.length}`);\n                    formatted_values.push(format_map[key]);\n                }\n            });\n\n        formatted_values.forEach((value, i) => {\n            str = str.replace(`$${i}`, value);\n        });\n\n        return str;\n    },\n\n    diff(date_a, date_b, scale = DAY) {\n        let milliseconds, seconds, hours, minutes, days, months, years;\n\n        milliseconds = date_a - date_b;\n        seconds = milliseconds / 1000;\n        minutes = seconds / 60;\n        hours = minutes / 60;\n        days = hours / 24;\n        months = days / 30;\n        years = months / 12;\n\n        if (!scale.endsWith('s')) {\n            scale += 's';\n        }\n\n        return Math.floor(\n            {\n                milliseconds,\n                seconds,\n                minutes,\n                hours,\n                days,\n                months,\n                years,\n            }[scale]\n        );\n    },\n\n    today() {\n        const vals = this.get_date_values(new Date()).slice(0, 3);\n        return new Date(...vals);\n    },\n\n    now() {\n        return new Date();\n    },\n\n    add(date, qty, scale) {\n        qty = parseInt(qty, 10);\n        const vals = [\n            date.getFullYear() + (scale === YEAR ? qty : 0),\n            date.getMonth() + (scale === MONTH ? qty : 0),\n            date.getDate() + (scale === DAY ? qty : 0),\n            date.getHours() + (scale === HOUR ? qty : 0),\n            date.getMinutes() + (scale === MINUTE ? qty : 0),\n            date.getSeconds() + (scale === SECOND ? qty : 0),\n            date.getMilliseconds() + (scale === MILLISECOND ? qty : 0),\n        ];\n        return new Date(...vals);\n    },\n\n    start_of(date, scale) {\n        const scores = {\n            [YEAR]: 6,\n            [MONTH]: 5,\n            [DAY]: 4,\n            [HOUR]: 3,\n            [MINUTE]: 2,\n            [SECOND]: 1,\n            [MILLISECOND]: 0,\n        };\n\n        function should_reset(_scale) {\n            const max_score = scores[scale];\n            return scores[_scale] <= max_score;\n        }\n\n        const vals = [\n            date.getFullYear(),\n            should_reset(YEAR) ? 0 : date.getMonth(),\n            should_reset(MONTH) ? 1 : date.getDate(),\n            should_reset(DAY) ? 0 : date.getHours(),\n            should_reset(HOUR) ? 0 : date.getMinutes(),\n            should_reset(MINUTE) ? 0 : date.getSeconds(),\n            should_reset(SECOND) ? 0 : date.getMilliseconds(),\n        ];\n\n        return new Date(...vals);\n    },\n\n    clone(date) {\n        return new Date(...this.get_date_values(date));\n    },\n\n    get_date_values(date) {\n        return [\n            date.getFullYear(),\n            date.getMonth(),\n            date.getDate(),\n            date.getHours(),\n            date.getMinutes(),\n            date.getSeconds(),\n            date.getMilliseconds(),\n        ];\n    },\n\n    get_days_in_month(date) {\n        const no_of_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\n        const month = date.getMonth();\n\n        if (month !== 1) {\n            return no_of_days[month];\n        }\n\n        // Feb\n        const year = date.getFullYear();\n        if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {\n            return 29;\n        }\n        return 28;\n    },\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\nfunction padStart(str, targetLength, padString) {\n    str = str + '';\n    targetLength = targetLength >> 0;\n    padString = String(typeof padString !== 'undefined' ? padString : ' ');\n    if (str.length > targetLength) {\n        return String(str);\n    } else {\n        targetLength = targetLength - str.length;\n        if (targetLength > padString.length) {\n            padString += padString.repeat(targetLength / padString.length);\n        }\n        return padString.slice(0, targetLength) + String(str);\n    }\n}\n","export function $(expr, con) {\n    return typeof expr === 'string'\n        ? (con || document).querySelector(expr)\n        : expr || null;\n}\n\nexport function createSVG(tag, attrs) {\n    const elem = document.createElementNS('http://www.w3.org/2000/svg', tag);\n    for (let attr in attrs) {\n        if (attr === 'append_to') {\n            const parent = attrs.append_to;\n            parent.appendChild(elem);\n        } else if (attr === 'innerHTML') {\n            elem.innerHTML = attrs.innerHTML;\n        } else {\n            elem.setAttribute(attr, attrs[attr]);\n        }\n    }\n    return elem;\n}\n\nexport function animateSVG(svgElement, attr, from, to) {\n    const animatedSvgElement = getAnimationElement(svgElement, attr, from, to);\n\n    if (animatedSvgElement === svgElement) {\n        // triggered 2nd time programmatically\n        // trigger artificial click event\n        const event = document.createEvent('HTMLEvents');\n        event.initEvent('click', true, true);\n        event.eventName = 'click';\n        animatedSvgElement.dispatchEvent(event);\n    }\n}\n\nfunction getAnimationElement(\n    svgElement,\n    attr,\n    from,\n    to,\n    dur = '0.4s',\n    begin = '0.1s'\n) {\n    const animEl = svgElement.querySelector('animate');\n    if (animEl) {\n        $.attr(animEl, {\n            attributeName: attr,\n            from,\n            to,\n            dur,\n            begin: 'click + ' + begin, // artificial click\n        });\n        return svgElement;\n    }\n\n    const animateElement = createSVG('animate', {\n        attributeName: attr,\n        from,\n        to,\n        dur,\n        begin,\n        calcMode: 'spline',\n        values: from + ';' + to,\n        keyTimes: '0; 1',\n        keySplines: cubic_bezier('ease-out'),\n    });\n    svgElement.appendChild(animateElement);\n\n    return svgElement;\n}\n\nfunction cubic_bezier(name) {\n    return {\n        ease: '.25 .1 .25 1',\n        linear: '0 0 1 1',\n        'ease-in': '.42 0 1 1',\n        'ease-out': '0 0 .58 1',\n        'ease-in-out': '.42 0 .58 1',\n    }[name];\n}\n\n$.on = (element, event, selector, callback) => {\n    if (!callback) {\n        callback = selector;\n        $.bind(element, event, callback);\n    } else {\n        $.delegate(element, event, selector, callback);\n    }\n};\n\n$.off = (element, event, handler) => {\n    element.removeEventListener(event, handler);\n};\n\n$.bind = (element, event, callback) => {\n    event.split(/\\s+/).forEach(function (event) {\n        element.addEventListener(event, callback);\n    });\n};\n\n$.delegate = (element, event, selector, callback) => {\n    element.addEventListener(event, function (e) {\n        const delegatedTarget = e.target.closest(selector);\n        if (delegatedTarget) {\n            e.delegatedTarget = delegatedTarget;\n            callback.call(this, e, delegatedTarget);\n        }\n    });\n};\n\n$.closest = (selector, element) => {\n    if (!element) return null;\n\n    if (element.matches(selector)) {\n        return element;\n    }\n\n    return $.closest(selector, element.parentNode);\n};\n\n$.attr = (element, attr, value) => {\n    if (!value && typeof attr === 'string') {\n        return element.getAttribute(attr);\n    }\n\n    if (typeof attr === 'object') {\n        for (let key in attr) {\n            $.attr(element, key, attr[key]);\n        }\n        return;\n    }\n\n    element.setAttribute(attr, value);\n};\n","import date_utils from './date_utils';\nimport { $, createSVG, animateSVG } from './svg_utils';\n\nexport default class Bar {\n    constructor(gantt, task) {\n        this.set_defaults(gantt, task);\n        this.prepare();\n        this.draw();\n        this.bind();\n    }\n\n    set_defaults(gantt, task) {\n        this.action_completed = false;\n        this.gantt = gantt;\n        this.task = task;\n    }\n\n    prepare() {\n        this.prepare_values();\n        this.prepare_helpers();\n    }\n\n    prepare_values() {\n        this.invalid = this.task.invalid;\n        this.height = this.gantt.options.bar_height;\n        this.x = this.compute_x();\n        this.y = this.compute_y();\n        this.corner_radius = this.gantt.options.bar_corner_radius;\n        this.duration =\n            date_utils.diff(this.task._end, this.task._start, 'hour') /\n            this.gantt.options.step;\n        this.width = this.gantt.options.column_width * this.duration;\n        this.progress_width =\n            this.gantt.options.column_width *\n                this.duration *\n                (this.task.progress / 100) || 0;\n        this.group = createSVG('g', {\n            class: 'bar-wrapper ' + (this.task.custom_class || ''),\n            'data-id': this.task.id,\n        });\n        this.bar_group = createSVG('g', {\n            class: 'bar-group',\n            append_to: this.group,\n        });\n        this.handle_group = createSVG('g', {\n            class: 'handle-group',\n            append_to: this.group,\n        });\n    }\n\n    prepare_helpers() {\n        SVGElement.prototype.getX = function () {\n            return +this.getAttribute('x');\n        };\n        SVGElement.prototype.getY = function () {\n            return +this.getAttribute('y');\n        };\n        SVGElement.prototype.getWidth = function () {\n            return +this.getAttribute('width');\n        };\n        SVGElement.prototype.getHeight = function () {\n            return +this.getAttribute('height');\n        };\n        SVGElement.prototype.getEndX = function () {\n            return this.getX() + this.getWidth();\n        };\n    }\n\n    draw() {\n        this.draw_bar();\n        this.draw_progress_bar();\n        this.draw_label();\n        this.draw_resize_handles();\n    }\n\n    draw_bar() {\n        this.$bar = createSVG('rect', {\n            x: this.x,\n            y: this.y,\n            width: this.width,\n            height: this.height,\n            rx: this.corner_radius,\n            ry: this.corner_radius,\n            class: 'bar',\n            append_to: this.bar_group,\n        });\n\n        animateSVG(this.$bar, 'width', 0, this.width);\n\n        if (this.invalid) {\n            this.$bar.classList.add('bar-invalid');\n        }\n    }\n\n    draw_progress_bar() {\n        if (this.invalid) return;\n        this.$bar_progress = createSVG('rect', {\n            x: this.x,\n            y: this.y,\n            width: this.progress_width,\n            height: this.height,\n            rx: this.corner_radius,\n            ry: this.corner_radius,\n            class: 'bar-progress',\n            append_to: this.bar_group,\n        });\n\n        animateSVG(this.$bar_progress, 'width', 0, this.progress_width);\n    }\n\n    draw_label() {\n        createSVG('text', {\n            x: this.x + this.width / 2,\n            y: this.y + this.height / 2,\n            innerHTML: this.task.name,\n            class: 'bar-label',\n            append_to: this.bar_group,\n        });\n        // labels get BBox in the next tick\n        requestAnimationFrame(() => this.update_label_position());\n    }\n\n    draw_resize_handles() {\n        if (this.invalid) return;\n\n        const bar = this.$bar;\n        const handle_width = 8;\n\n        createSVG('rect', {\n            x: bar.getX() + bar.getWidth() - 9,\n            y: bar.getY() + 1,\n            width: handle_width,\n            height: this.height - 2,\n            rx: this.corner_radius,\n            ry: this.corner_radius,\n            class: 'handle right',\n            append_to: this.handle_group,\n        });\n\n        createSVG('rect', {\n            x: bar.getX() + 1,\n            y: bar.getY() + 1,\n            width: handle_width,\n            height: this.height - 2,\n            rx: this.corner_radius,\n            ry: this.corner_radius,\n            class: 'handle left',\n            append_to: this.handle_group,\n        });\n\n        if (this.task.progress && this.task.progress < 100) {\n            this.$handle_progress = createSVG('polygon', {\n                points: this.get_progress_polygon_points().join(','),\n                class: 'handle progress',\n                append_to: this.handle_group,\n            });\n        }\n    }\n\n    get_progress_polygon_points() {\n        const bar_progress = this.$bar_progress;\n        return [\n            bar_progress.getEndX() - 5,\n            bar_progress.getY() + bar_progress.getHeight(),\n            bar_progress.getEndX() + 5,\n            bar_progress.getY() + bar_progress.getHeight(),\n            bar_progress.getEndX(),\n            bar_progress.getY() + bar_progress.getHeight() - 8.66,\n        ];\n    }\n\n    bind() {\n        if (this.invalid) return;\n        this.setup_click_event();\n    }\n\n    setup_click_event() {\n        $.on(this.group, 'focus ' + this.gantt.options.popup_trigger, (e) => {\n            if (this.action_completed) {\n                // just finished a move action, wait for a few seconds\n                return;\n            }\n\n            this.show_popup();\n            this.gantt.unselect_all();\n            this.group.classList.add('active');\n        });\n\n        $.on(this.group, 'dblclick', (e) => {\n            if (this.action_completed) {\n                // just finished a move action, wait for a few seconds\n                return;\n            }\n\n            this.gantt.trigger_event('click', [this.task]);\n        });\n    }\n\n    show_popup() {\n        if (this.gantt.bar_being_dragged) return;\n\n        const start_date = date_utils.format(\n            this.task._start,\n            'MMM D',\n            this.gantt.options.language\n        );\n        const end_date = date_utils.format(\n            date_utils.add(this.task._end, -1, 'second'),\n            'MMM D',\n            this.gantt.options.language\n        );\n        const subtitle = start_date + ' - ' + end_date;\n\n        this.gantt.show_popup({\n            target_element: this.$bar,\n            title: this.task.name,\n            subtitle: subtitle,\n            task: this.task,\n        });\n    }\n\n    update_bar_position({ x = null, width = null }) {\n        const bar = this.$bar;\n        if (x) {\n            // get all x values of parent task\n            const xs = this.task.dependencies.map((dep) => {\n                return this.gantt.get_bar(dep).$bar.getX();\n            });\n            // child task must not go before parent\n            const valid_x = xs.reduce((prev, curr) => {\n                return x >= curr;\n            }, x);\n            if (!valid_x) {\n                width = null;\n                return;\n            }\n            this.update_attr(bar, 'x', x);\n        }\n        if (width && width >= this.gantt.options.column_width) {\n            this.update_attr(bar, 'width', width);\n        }\n        this.update_label_position();\n        this.update_handle_position();\n        this.update_progressbar_position();\n        this.update_arrow_position();\n    }\n\n    date_changed() {\n        let changed = false;\n        const { new_start_date, new_end_date } = this.compute_start_end_date();\n\n        if (Number(this.task._start) !== Number(new_start_date)) {\n            changed = true;\n            this.task._start = new_start_date;\n        }\n\n        if (Number(this.task._end) !== Number(new_end_date)) {\n            changed = true;\n            this.task._end = new_end_date;\n        }\n\n        if (!changed) return;\n\n        this.gantt.trigger_event('date_change', [\n            this.task,\n            new_start_date,\n            date_utils.add(new_end_date, -1, 'second'),\n        ]);\n    }\n\n    progress_changed() {\n        const new_progress = this.compute_progress();\n        this.task.progress = new_progress;\n        this.gantt.trigger_event('progress_change', [this.task, new_progress]);\n    }\n\n    set_action_completed() {\n        this.action_completed = true;\n        setTimeout(() => (this.action_completed = false), 1000);\n    }\n\n    compute_start_end_date() {\n        const bar = this.$bar;\n        const x_in_units = bar.getX() / this.gantt.options.column_width;\n        const new_start_date = date_utils.add(\n            this.gantt.gantt_start,\n            x_in_units * this.gantt.options.step,\n            'hour'\n        );\n        const width_in_units = bar.getWidth() / this.gantt.options.column_width;\n        const new_end_date = date_utils.add(\n            new_start_date,\n            width_in_units * this.gantt.options.step,\n            'hour'\n        );\n\n        return { new_start_date, new_end_date };\n    }\n\n    compute_progress() {\n        const progress =\n            (this.$bar_progress.getWidth() / this.$bar.getWidth()) * 100;\n        return parseInt(progress, 10);\n    }\n\n    compute_x() {\n        const { step, column_width } = this.gantt.options;\n        const task_start = this.task._start;\n        const gantt_start = this.gantt.gantt_start;\n\n        const diff = date_utils.diff(task_start, gantt_start, 'hour');\n        let x = (diff / step) * column_width;\n\n        if (this.gantt.view_is('Month')) {\n            const diff = date_utils.diff(task_start, gantt_start, 'day');\n            x = (diff * column_width) / 30;\n        }\n        return x;\n    }\n\n    compute_y() {\n        return (\n            this.gantt.options.header_height +\n            this.gantt.options.padding +\n            this.task._index * (this.height + this.gantt.options.padding)\n        );\n    }\n\n    get_snap_position(dx) {\n        let odx = dx,\n            rem,\n            position;\n\n        if (this.gantt.view_is('Week')) {\n            rem = dx % (this.gantt.options.column_width / 7);\n            position =\n                odx -\n                rem +\n                (rem < this.gantt.options.column_width / 14\n                    ? 0\n                    : this.gantt.options.column_width / 7);\n        } else if (this.gantt.view_is('Month')) {\n            rem = dx % (this.gantt.options.column_width / 30);\n            position =\n                odx -\n                rem +\n                (rem < this.gantt.options.column_width / 60\n                    ? 0\n                    : this.gantt.options.column_width / 30);\n        } else {\n            rem = dx % this.gantt.options.column_width;\n            position =\n                odx -\n                rem +\n                (rem < this.gantt.options.column_width / 2\n                    ? 0\n                    : this.gantt.options.column_width);\n        }\n        return position;\n    }\n\n    update_attr(element, attr, value) {\n        value = +value;\n        if (!isNaN(value)) {\n            element.setAttribute(attr, value);\n        }\n        return element;\n    }\n\n    update_progressbar_position() {\n        this.$bar_progress.setAttribute('x', this.$bar.getX());\n        this.$bar_progress.setAttribute(\n            'width',\n            this.$bar.getWidth() * (this.task.progress / 100)\n        );\n    }\n\n    update_label_position() {\n        const bar = this.$bar,\n            label = this.group.querySelector('.bar-label');\n\n        if (label.getBBox().width > bar.getWidth()) {\n            label.classList.add('big');\n            label.setAttribute('x', bar.getX() + bar.getWidth() + 5);\n        } else {\n            label.classList.remove('big');\n            label.setAttribute('x', bar.getX() + bar.getWidth() / 2);\n        }\n    }\n\n    update_handle_position() {\n        const bar = this.$bar;\n        this.handle_group\n            .querySelector('.handle.left')\n            .setAttribute('x', bar.getX() + 1);\n        this.handle_group\n            .querySelector('.handle.right')\n            .setAttribute('x', bar.getEndX() - 9);\n        const handle = this.group.querySelector('.handle.progress');\n        handle &&\n            handle.setAttribute('points', this.get_progress_polygon_points());\n    }\n\n    update_arrow_position() {\n        this.arrows = this.arrows || [];\n        for (let arrow of this.arrows) {\n            arrow.update();\n        }\n    }\n}\n\nfunction isFunction(functionToCheck) {\n    var getType = {};\n    return (\n        functionToCheck &&\n        getType.toString.call(functionToCheck) === '[object Function]'\n    );\n}\n","import { createSVG } from './svg_utils';\n\nexport default class Arrow {\n    constructor(gantt, from_task, to_task) {\n        this.gantt = gantt;\n        this.from_task = from_task;\n        this.to_task = to_task;\n\n        this.calculate_path();\n        this.draw();\n    }\n\n    calculate_path() {\n        let start_x =\n            this.from_task.$bar.getX() + this.from_task.$bar.getWidth() / 2;\n\n        const condition = () =>\n            this.to_task.$bar.getX() < start_x + this.gantt.options.padding &&\n            start_x > this.from_task.$bar.getX() + this.gantt.options.padding;\n\n        while (condition()) {\n            start_x -= 10;\n        }\n\n        const start_y =\n            this.gantt.options.header_height +\n            this.gantt.options.bar_height +\n            (this.gantt.options.padding + this.gantt.options.bar_height) *\n                this.from_task.task._index +\n            this.gantt.options.padding;\n\n        const end_x = this.to_task.$bar.getX() - this.gantt.options.padding / 2;\n        const end_y =\n            this.gantt.options.header_height +\n            this.gantt.options.bar_height / 2 +\n            (this.gantt.options.padding + this.gantt.options.bar_height) *\n                this.to_task.task._index +\n            this.gantt.options.padding;\n\n        const from_is_below_to =\n            this.from_task.task._index > this.to_task.task._index;\n        const curve = this.gantt.options.arrow_curve;\n        const clockwise = from_is_below_to ? 1 : 0;\n        const curve_y = from_is_below_to ? -curve : curve;\n        const offset = from_is_below_to\n            ? end_y + this.gantt.options.arrow_curve\n            : end_y - this.gantt.options.arrow_curve;\n\n        this.path = `\n            M ${start_x} ${start_y}\n            V ${offset}\n            a ${curve} ${curve} 0 0 ${clockwise} ${curve} ${curve_y}\n            L ${end_x} ${end_y}\n            m -5 -5\n            l 5 5\n            l -5 5`;\n\n        if (\n            this.to_task.$bar.getX() <\n            this.from_task.$bar.getX() + this.gantt.options.padding\n        ) {\n            const down_1 = this.gantt.options.padding / 2 - curve;\n            const down_2 =\n                this.to_task.$bar.getY() +\n                this.to_task.$bar.getHeight() / 2 -\n                curve_y;\n            const left = this.to_task.$bar.getX() - this.gantt.options.padding;\n\n            this.path = `\n                M ${start_x} ${start_y}\n                v ${down_1}\n                a ${curve} ${curve} 0 0 1 -${curve} ${curve}\n                H ${left}\n                a ${curve} ${curve} 0 0 ${clockwise} -${curve} ${curve_y}\n                V ${down_2}\n                a ${curve} ${curve} 0 0 ${clockwise} ${curve} ${curve_y}\n                L ${end_x} ${end_y}\n                m -5 -5\n                l 5 5\n                l -5 5`;\n        }\n    }\n\n    draw() {\n        this.element = createSVG('path', {\n            d: this.path,\n            'data-from': this.from_task.task.id,\n            'data-to': this.to_task.task.id,\n        });\n    }\n\n    update() {\n        this.calculate_path();\n        this.element.setAttribute('d', this.path);\n    }\n}\n","export default class Popup {\n    constructor(parent, custom_html) {\n        this.parent = parent;\n        this.custom_html = custom_html;\n        this.make();\n    }\n\n    make() {\n        this.parent.innerHTML = `\n            <div class=\"title\"></div>\n            <div class=\"subtitle\"></div>\n            <div class=\"pointer\"></div>\n        `;\n\n        this.hide();\n\n        this.title = this.parent.querySelector('.title');\n        this.subtitle = this.parent.querySelector('.subtitle');\n        this.pointer = this.parent.querySelector('.pointer');\n    }\n\n    show(options) {\n        if (!options.target_element) {\n            throw new Error('target_element is required to show popup');\n        }\n        if (!options.position) {\n            options.position = 'left';\n        }\n        const target_element = options.target_element;\n\n        if (this.custom_html) {\n            let html = this.custom_html(options.task);\n            html += '<div class=\"pointer\"></div>';\n            this.parent.innerHTML = html;\n            this.pointer = this.parent.querySelector('.pointer');\n        } else {\n            // set data\n            this.title.innerHTML = options.title;\n            this.subtitle.innerHTML = options.subtitle;\n            this.parent.style.width = this.parent.clientWidth + 'px';\n        }\n\n        // set position\n        let position_meta;\n        if (target_element instanceof HTMLElement) {\n            position_meta = target_element.getBoundingClientRect();\n        } else if (target_element instanceof SVGElement) {\n            position_meta = options.target_element.getBBox();\n        }\n\n        if (options.position === 'left') {\n            this.parent.style.left =\n                position_meta.x + (position_meta.width + 10) + 'px';\n            this.parent.style.top = position_meta.y + 'px';\n\n            this.pointer.style.transform = 'rotateZ(90deg)';\n            this.pointer.style.left = '-7px';\n            this.pointer.style.top = '2px';\n        }\n\n        // show\n        this.parent.style.opacity = 1;\n    }\n\n    hide() {\n        this.parent.style.opacity = 0;\n        this.parent.style.left = 0;\n    }\n}\n","import date_utils from './date_utils';\nimport { $, createSVG } from './svg_utils';\nimport Bar from './bar';\nimport Arrow from './arrow';\nimport Popup from './popup';\n\nimport './gantt.scss';\n\nconst VIEW_MODE = {\n    QUARTER_DAY: 'Quarter Day',\n    HALF_DAY: 'Half Day',\n    DAY: 'Day',\n    WEEK: 'Week',\n    MONTH: 'Month',\n    YEAR: 'Year',\n};\n\nexport default class Gantt {\n    constructor(wrapper, tasks, options) {\n        this.setup_wrapper(wrapper);\n        this.setup_options(options);\n        this.setup_tasks(tasks);\n        // initialize with default view mode\n        this.change_view_mode();\n        this.bind_events();\n    }\n\n    setup_wrapper(element) {\n        let svg_element, wrapper_element;\n\n        // CSS Selector is passed\n        if (typeof element === 'string') {\n            element = document.querySelector(element);\n        }\n\n        // get the SVGElement\n        if (element instanceof HTMLElement) {\n            wrapper_element = element;\n            svg_element = element.querySelector('svg');\n        } else if (element instanceof SVGElement) {\n            svg_element = element;\n        } else {\n            throw new TypeError(\n                'Frappé Gantt only supports usage of a string CSS selector,' +\n                    \" HTML DOM element or SVG DOM element for the 'element' parameter\"\n            );\n        }\n\n        // svg element\n        if (!svg_element) {\n            // create it\n            this.$svg = createSVG('svg', {\n                append_to: wrapper_element,\n                class: 'gantt',\n            });\n        } else {\n            this.$svg = svg_element;\n            this.$svg.classList.add('gantt');\n        }\n\n        // wrapper element\n        this.$container = document.createElement('div');\n        this.$container.classList.add('gantt-container');\n\n        const parent_element = this.$svg.parentElement;\n        parent_element.appendChild(this.$container);\n        this.$container.appendChild(this.$svg);\n\n        // popup wrapper\n        this.popup_wrapper = document.createElement('div');\n        this.popup_wrapper.classList.add('popup-wrapper');\n        this.$container.appendChild(this.popup_wrapper);\n    }\n\n    setup_options(options) {\n        const default_options = {\n            header_height: 50,\n            column_width: 30,\n            step: 24,\n            view_modes: [...Object.values(VIEW_MODE)],\n            bar_height: 20,\n            bar_corner_radius: 3,\n            arrow_curve: 5,\n            padding: 18,\n            view_mode: 'Day',\n            date_format: 'YYYY-MM-DD',\n            popup_trigger: 'click',\n            custom_popup_html: null,\n            language: 'en',\n        };\n        this.options = Object.assign({}, default_options, options);\n    }\n\n    setup_tasks(tasks) {\n        // prepare tasks\n        this.tasks = tasks.map((task, i) => {\n            // convert to Date objects\n            task._start = date_utils.parse(task.start);\n            task._end = date_utils.parse(task.end);\n\n            // make task invalid if duration too large\n            if (date_utils.diff(task._end, task._start, 'year') > 10) {\n                task.end = null;\n            }\n\n            // cache index\n            task._index = i;\n\n            // invalid dates\n            if (!task.start && !task.end) {\n                const today = date_utils.today();\n                task._start = today;\n                task._end = date_utils.add(today, 2, 'day');\n            }\n\n            if (!task.start && task.end) {\n                task._start = date_utils.add(task._end, -2, 'day');\n            }\n\n            if (task.start && !task.end) {\n                task._end = date_utils.add(task._start, 2, 'day');\n            }\n\n            // if hours is not set, assume the last day is full day\n            // e.g: 2018-09-09 becomes 2018-09-09 23:59:59\n            const task_end_values = date_utils.get_date_values(task._end);\n            if (task_end_values.slice(3).every((d) => d === 0)) {\n                task._end = date_utils.add(task._end, 24, 'hour');\n            }\n\n            // invalid flag\n            if (!task.start || !task.end) {\n                task.invalid = true;\n            }\n\n            // dependencies\n            if (typeof task.dependencies === 'string' || !task.dependencies) {\n                let deps = [];\n                if (task.dependencies) {\n                    deps = task.dependencies\n                        .split(',')\n                        .map((d) => d.trim())\n                        .filter((d) => d);\n                }\n                task.dependencies = deps;\n            }\n\n            // uids\n            if (!task.id) {\n                task.id = generate_id(task);\n            }\n\n            return task;\n        });\n\n        this.setup_dependencies();\n    }\n\n    setup_dependencies() {\n        this.dependency_map = {};\n        for (let t of this.tasks) {\n            for (let d of t.dependencies) {\n                this.dependency_map[d] = this.dependency_map[d] || [];\n                this.dependency_map[d].push(t.id);\n            }\n        }\n    }\n\n    refresh(tasks) {\n        this.setup_tasks(tasks);\n        this.change_view_mode();\n    }\n\n    change_view_mode(mode = this.options.view_mode) {\n        this.update_view_scale(mode);\n        this.setup_dates();\n        this.render();\n        // fire viewmode_change event\n        this.trigger_event('view_change', [mode]);\n    }\n\n    update_view_scale(view_mode) {\n        this.options.view_mode = view_mode;\n\n        if (view_mode === VIEW_MODE.DAY) {\n            this.options.step = 24;\n            this.options.column_width = 38;\n        } else if (view_mode === VIEW_MODE.HALF_DAY) {\n            this.options.step = 24 / 2;\n            this.options.column_width = 38;\n        } else if (view_mode === VIEW_MODE.QUARTER_DAY) {\n            this.options.step = 24 / 4;\n            this.options.column_width = 38;\n        } else if (view_mode === VIEW_MODE.WEEK) {\n            this.options.step = 24 * 7;\n            this.options.column_width = 140;\n        } else if (view_mode === VIEW_MODE.MONTH) {\n            this.options.step = 24 * 30;\n            this.options.column_width = 120;\n        } else if (view_mode === VIEW_MODE.YEAR) {\n            this.options.step = 24 * 365;\n            this.options.column_width = 120;\n        }\n    }\n\n    setup_dates() {\n        this.setup_gantt_dates();\n        this.setup_date_values();\n    }\n\n    setup_gantt_dates() {\n        this.gantt_start = this.gantt_end = null;\n\n        for (let task of this.tasks) {\n            // set global start and end date\n            if (!this.gantt_start || task._start < this.gantt_start) {\n                this.gantt_start = task._start;\n            }\n            if (!this.gantt_end || task._end > this.gantt_end) {\n                this.gantt_end = task._end;\n            }\n        }\n\n        this.gantt_start = date_utils.start_of(this.gantt_start, 'day');\n        this.gantt_end = date_utils.start_of(this.gantt_end, 'day');\n\n        // add date padding on both sides\n        if (this.view_is([VIEW_MODE.QUARTER_DAY, VIEW_MODE.HALF_DAY])) {\n            this.gantt_start = date_utils.add(this.gantt_start, -7, 'day');\n            this.gantt_end = date_utils.add(this.gantt_end, 7, 'day');\n        } else if (this.view_is(VIEW_MODE.MONTH)) {\n            this.gantt_start = date_utils.start_of(this.gantt_start, 'year');\n            this.gantt_end = date_utils.add(this.gantt_end, 1, 'year');\n        } else if (this.view_is(VIEW_MODE.YEAR)) {\n            this.gantt_start = date_utils.add(this.gantt_start, -2, 'year');\n            this.gantt_end = date_utils.add(this.gantt_end, 2, 'year');\n        } else {\n            this.gantt_start = date_utils.add(this.gantt_start, -1, 'month');\n            this.gantt_end = date_utils.add(this.gantt_end, 1, 'month');\n        }\n    }\n\n    setup_date_values() {\n        this.dates = [];\n        let cur_date = null;\n\n        while (cur_date === null || cur_date < this.gantt_end) {\n            if (!cur_date) {\n                cur_date = date_utils.clone(this.gantt_start);\n            } else {\n                if (this.view_is(VIEW_MODE.YEAR)) {\n                    cur_date = date_utils.add(cur_date, 1, 'year');\n                } else if (this.view_is(VIEW_MODE.MONTH)) {\n                    cur_date = date_utils.add(cur_date, 1, 'month');\n                } else {\n                    cur_date = date_utils.add(\n                        cur_date,\n                        this.options.step,\n                        'hour'\n                    );\n                }\n            }\n            this.dates.push(cur_date);\n        }\n    }\n\n    bind_events() {\n        this.bind_grid_click();\n        this.bind_bar_events();\n    }\n\n    render() {\n        this.clear();\n        this.setup_layers();\n        this.make_grid();\n        this.make_dates();\n        this.make_bars();\n        this.make_arrows();\n        this.map_arrows_on_bars();\n        this.set_width();\n        this.set_scroll_position();\n    }\n\n    setup_layers() {\n        this.layers = {};\n        const layers = ['grid', 'date', 'arrow', 'progress', 'bar', 'details'];\n        // make group layers\n        for (let layer of layers) {\n            this.layers[layer] = createSVG('g', {\n                class: layer,\n                append_to: this.$svg,\n            });\n        }\n    }\n\n    make_grid() {\n        this.make_grid_background();\n        this.make_grid_rows();\n        this.make_grid_header();\n        this.make_grid_ticks();\n        this.make_grid_highlights();\n    }\n\n    make_grid_background() {\n        const grid_width = this.dates.length * this.options.column_width;\n        const grid_height =\n            this.options.header_height +\n            this.options.padding +\n            (this.options.bar_height + this.options.padding) *\n                this.tasks.length;\n\n        createSVG('rect', {\n            x: 0,\n            y: 0,\n            width: grid_width,\n            height: grid_height,\n            class: 'grid-background',\n            append_to: this.layers.grid,\n        });\n\n        $.attr(this.$svg, {\n            height: grid_height + this.options.padding + 100,\n            width: '100%',\n        });\n    }\n\n    make_grid_rows() {\n        const rows_layer = createSVG('g', { append_to: this.layers.grid });\n        const lines_layer = createSVG('g', { append_to: this.layers.grid });\n\n        const row_width = this.dates.length * this.options.column_width;\n        const row_height = this.options.bar_height + this.options.padding;\n\n        let row_y = this.options.header_height + this.options.padding / 2;\n\n        for (let task of this.tasks) {\n            createSVG('rect', {\n                x: 0,\n                y: row_y,\n                width: row_width,\n                height: row_height,\n                class: 'grid-row',\n                append_to: rows_layer,\n            });\n\n            createSVG('line', {\n                x1: 0,\n                y1: row_y + row_height,\n                x2: row_width,\n                y2: row_y + row_height,\n                class: 'row-line',\n                append_to: lines_layer,\n            });\n\n            row_y += this.options.bar_height + this.options.padding;\n        }\n    }\n\n    make_grid_header() {\n        const header_width = this.dates.length * this.options.column_width;\n        const header_height = this.options.header_height + 10;\n        createSVG('rect', {\n            x: 0,\n            y: 0,\n            width: header_width,\n            height: header_height,\n            class: 'grid-header',\n            append_to: this.layers.grid,\n        });\n    }\n\n    make_grid_ticks() {\n        let tick_x = 0;\n        let tick_y = this.options.header_height + this.options.padding / 2;\n        let tick_height =\n            (this.options.bar_height + this.options.padding) *\n            this.tasks.length;\n\n        for (let date of this.dates) {\n            let tick_class = 'tick';\n            // thick tick for monday\n            if (this.view_is(VIEW_MODE.DAY) && date.getDate() === 1) {\n                tick_class += ' thick';\n            }\n            // thick tick for first week\n            if (\n                this.view_is(VIEW_MODE.WEEK) &&\n                date.getDate() >= 1 &&\n                date.getDate() < 8\n            ) {\n                tick_class += ' thick';\n            }\n            // thick ticks for quarters\n            if (\n                this.view_is(VIEW_MODE.MONTH) &&\n                (date.getMonth() + 1) % 3 === 0\n            ) {\n                tick_class += ' thick';\n            }\n\n            createSVG('path', {\n                d: `M ${tick_x} ${tick_y} v ${tick_height}`,\n                class: tick_class,\n                append_to: this.layers.grid,\n            });\n\n            if (this.view_is(VIEW_MODE.MONTH)) {\n                tick_x +=\n                    (date_utils.get_days_in_month(date) *\n                        this.options.column_width) /\n                    30;\n            } else {\n                tick_x += this.options.column_width;\n            }\n        }\n    }\n\n    make_grid_highlights() {\n        // highlight today's date\n        if (this.view_is(VIEW_MODE.DAY)) {\n            const x =\n                (date_utils.diff(date_utils.today(), this.gantt_start, 'hour') /\n                    this.options.step) *\n                this.options.column_width;\n            const y = 0;\n\n            const width = this.options.column_width;\n            const height =\n                (this.options.bar_height + this.options.padding) *\n                    this.tasks.length +\n                this.options.header_height +\n                this.options.padding / 2;\n\n            createSVG('rect', {\n                x,\n                y,\n                width,\n                height,\n                class: 'today-highlight',\n                append_to: this.layers.grid,\n            });\n        }\n    }\n\n    make_dates() {\n        for (let date of this.get_dates_to_draw()) {\n            createSVG('text', {\n                x: date.lower_x,\n                y: date.lower_y,\n                innerHTML: date.lower_text,\n                class: 'lower-text',\n                append_to: this.layers.date,\n            });\n\n            if (date.upper_text) {\n                const $upper_text = createSVG('text', {\n                    x: date.upper_x,\n                    y: date.upper_y,\n                    innerHTML: date.upper_text,\n                    class: 'upper-text',\n                    append_to: this.layers.date,\n                });\n\n                // remove out-of-bound dates\n                if (\n                    $upper_text.getBBox().x2 > this.layers.grid.getBBox().width\n                ) {\n                    $upper_text.remove();\n                }\n            }\n        }\n    }\n\n    get_dates_to_draw() {\n        let last_date = null;\n        const dates = this.dates.map((date, i) => {\n            const d = this.get_date_info(date, last_date, i);\n            last_date = date;\n            return d;\n        });\n        return dates;\n    }\n\n    get_date_info(date, last_date, i) {\n        if (!last_date) {\n            last_date = date_utils.add(date, 1, 'year');\n        }\n        const date_text = {\n            'Quarter Day_lower': date_utils.format(\n                date,\n                'HH',\n                this.options.language\n            ),\n            'Half Day_lower': date_utils.format(\n                date,\n                'HH',\n                this.options.language\n            ),\n            Day_lower:\n                date.getDate() !== last_date.getDate()\n                    ? date_utils.format(date, 'D', this.options.language)\n                    : '',\n            Week_lower:\n                date.getMonth() !== last_date.getMonth()\n                    ? date_utils.format(date, 'D MMM', this.options.language)\n                    : date_utils.format(date, 'D', this.options.language),\n            Month_lower: date_utils.format(date, 'MMMM', this.options.language),\n            Year_lower: date_utils.format(date, 'YYYY', this.options.language),\n            'Quarter Day_upper':\n                date.getDate() !== last_date.getDate()\n                    ? date_utils.format(date, 'D MMM', this.options.language)\n                    : '',\n            'Half Day_upper':\n                date.getDate() !== last_date.getDate()\n                    ? date.getMonth() !== last_date.getMonth()\n                        ? date_utils.format(\n                              date,\n                              'D MMM',\n                              this.options.language\n                          )\n                        : date_utils.format(date, 'D', this.options.language)\n                    : '',\n            Day_upper:\n                date.getMonth() !== last_date.getMonth()\n                    ? date_utils.format(date, 'MMMM', this.options.language)\n                    : '',\n            Week_upper:\n                date.getMonth() !== last_date.getMonth()\n                    ? date_utils.format(date, 'MMMM', this.options.language)\n                    : '',\n            Month_upper:\n                date.getFullYear() !== last_date.getFullYear()\n                    ? date_utils.format(date, 'YYYY', this.options.language)\n                    : '',\n            Year_upper:\n                date.getFullYear() !== last_date.getFullYear()\n                    ? date_utils.format(date, 'YYYY', this.options.language)\n                    : '',\n        };\n\n        const base_pos = {\n            x: i * this.options.column_width,\n            lower_y: this.options.header_height,\n            upper_y: this.options.header_height - 25,\n        };\n\n        const x_pos = {\n            'Quarter Day_lower': (this.options.column_width * 4) / 2,\n            'Quarter Day_upper': 0,\n            'Half Day_lower': (this.options.column_width * 2) / 2,\n            'Half Day_upper': 0,\n            Day_lower: this.options.column_width / 2,\n            Day_upper: (this.options.column_width * 30) / 2,\n            Week_lower: 0,\n            Week_upper: (this.options.column_width * 4) / 2,\n            Month_lower: this.options.column_width / 2,\n            Month_upper: (this.options.column_width * 12) / 2,\n            Year_lower: this.options.column_width / 2,\n            Year_upper: (this.options.column_width * 30) / 2,\n        };\n\n        return {\n            upper_text: date_text[`${this.options.view_mode}_upper`],\n            lower_text: date_text[`${this.options.view_mode}_lower`],\n            upper_x: base_pos.x + x_pos[`${this.options.view_mode}_upper`],\n            upper_y: base_pos.upper_y,\n            lower_x: base_pos.x + x_pos[`${this.options.view_mode}_lower`],\n            lower_y: base_pos.lower_y,\n        };\n    }\n\n    make_bars() {\n        this.bars = this.tasks.map((task) => {\n            const bar = new Bar(this, task);\n            this.layers.bar.appendChild(bar.group);\n            return bar;\n        });\n    }\n\n    make_arrows() {\n        this.arrows = [];\n        for (let task of this.tasks) {\n            let arrows = [];\n            arrows = task.dependencies\n                .map((task_id) => {\n                    const dependency = this.get_task(task_id);\n                    if (!dependency) return;\n                    const arrow = new Arrow(\n                        this,\n                        this.bars[dependency._index], // from_task\n                        this.bars[task._index] // to_task\n                    );\n                    this.layers.arrow.appendChild(arrow.element);\n                    return arrow;\n                })\n                .filter(Boolean); // filter falsy values\n            this.arrows = this.arrows.concat(arrows);\n        }\n    }\n\n    map_arrows_on_bars() {\n        for (let bar of this.bars) {\n            bar.arrows = this.arrows.filter((arrow) => {\n                return (\n                    arrow.from_task.task.id === bar.task.id ||\n                    arrow.to_task.task.id === bar.task.id\n                );\n            });\n        }\n    }\n\n    set_width() {\n        const cur_width = this.$svg.getBoundingClientRect().width;\n        const actual_width = this.$svg\n            .querySelector('.grid .grid-row')\n            .getAttribute('width');\n        if (cur_width < actual_width) {\n            this.$svg.setAttribute('width', actual_width);\n        }\n    }\n\n    set_scroll_position() {\n        const parent_element = this.$svg.parentElement;\n        if (!parent_element) return;\n\n        const hours_before_first_task = date_utils.diff(\n            this.get_oldest_starting_date(),\n            this.gantt_start,\n            'hour'\n        );\n\n        const scroll_pos =\n            (hours_before_first_task / this.options.step) *\n                this.options.column_width -\n            this.options.column_width;\n\n        parent_element.scrollLeft = scroll_pos;\n    }\n\n    bind_grid_click() {\n        $.on(\n            this.$svg,\n            this.options.popup_trigger,\n            '.grid-row, .grid-header',\n            () => {\n                this.unselect_all();\n                this.hide_popup();\n            }\n        );\n    }\n\n    bind_bar_events() {\n        let is_dragging = false;\n        let x_on_start = 0;\n        let y_on_start = 0;\n        let is_resizing_left = false;\n        let is_resizing_right = false;\n        let parent_bar_id = null;\n        let bars = []; // instanceof Bar\n        this.bar_being_dragged = null;\n\n        function action_in_progress() {\n            return is_dragging || is_resizing_left || is_resizing_right;\n        }\n\n        $.on(this.$svg, 'mousedown', '.bar-wrapper, .handle', (e, element) => {\n            const bar_wrapper = $.closest('.bar-wrapper', element);\n\n            if (element.classList.contains('left')) {\n                is_resizing_left = true;\n            } else if (element.classList.contains('right')) {\n                is_resizing_right = true;\n            } else if (element.classList.contains('bar-wrapper')) {\n                is_dragging = true;\n            }\n\n            bar_wrapper.classList.add('active');\n\n            x_on_start = e.offsetX;\n            y_on_start = e.offsetY;\n\n            parent_bar_id = bar_wrapper.getAttribute('data-id');\n            const ids = [\n                parent_bar_id,\n                ...this.get_all_dependent_tasks(parent_bar_id),\n            ];\n            bars = ids.map((id) => this.get_bar(id));\n\n            this.bar_being_dragged = parent_bar_id;\n\n            bars.forEach((bar) => {\n                const $bar = bar.$bar;\n                $bar.ox = $bar.getX();\n                $bar.oy = $bar.getY();\n                $bar.owidth = $bar.getWidth();\n                $bar.finaldx = 0;\n            });\n        });\n\n        $.on(this.$svg, 'mousemove', (e) => {\n            if (!action_in_progress()) return;\n            const dx = e.offsetX - x_on_start;\n            const dy = e.offsetY - y_on_start;\n\n            bars.forEach((bar) => {\n                const $bar = bar.$bar;\n                $bar.finaldx = this.get_snap_position(dx);\n                this.hide_popup();\n                if (is_resizing_left) {\n                    if (parent_bar_id === bar.task.id) {\n                        bar.update_bar_position({\n                            x: $bar.ox + $bar.finaldx,\n                            width: $bar.owidth - $bar.finaldx,\n                        });\n                    } else {\n                        bar.update_bar_position({\n                            x: $bar.ox + $bar.finaldx,\n                        });\n                    }\n                } else if (is_resizing_right) {\n                    if (parent_bar_id === bar.task.id) {\n                        bar.update_bar_position({\n                            width: $bar.owidth + $bar.finaldx,\n                        });\n                    }\n                } else if (is_dragging) {\n                    bar.update_bar_position({ x: $bar.ox + $bar.finaldx });\n                }\n            });\n        });\n\n        document.addEventListener('mouseup', (e) => {\n            if (is_dragging || is_resizing_left || is_resizing_right) {\n                bars.forEach((bar) => bar.group.classList.remove('active'));\n            }\n\n            is_dragging = false;\n            is_resizing_left = false;\n            is_resizing_right = false;\n        });\n\n        $.on(this.$svg, 'mouseup', (e) => {\n            this.bar_being_dragged = null;\n            bars.forEach((bar) => {\n                const $bar = bar.$bar;\n                if (!$bar.finaldx) return;\n                bar.date_changed();\n                bar.set_action_completed();\n            });\n        });\n\n        this.bind_bar_progress();\n    }\n\n    bind_bar_progress() {\n        let x_on_start = 0;\n        let y_on_start = 0;\n        let is_resizing = null;\n        let bar = null;\n        let $bar_progress = null;\n        let $bar = null;\n\n        $.on(this.$svg, 'mousedown', '.handle.progress', (e, handle) => {\n            is_resizing = true;\n            x_on_start = e.offsetX;\n            y_on_start = e.offsetY;\n\n            const $bar_wrapper = $.closest('.bar-wrapper', handle);\n            const id = $bar_wrapper.getAttribute('data-id');\n            bar = this.get_bar(id);\n\n            $bar_progress = bar.$bar_progress;\n            $bar = bar.$bar;\n\n            $bar_progress.finaldx = 0;\n            $bar_progress.owidth = $bar_progress.getWidth();\n            $bar_progress.min_dx = -$bar_progress.getWidth();\n            $bar_progress.max_dx = $bar.getWidth() - $bar_progress.getWidth();\n        });\n\n        $.on(this.$svg, 'mousemove', (e) => {\n            if (!is_resizing) return;\n            let dx = e.offsetX - x_on_start;\n            let dy = e.offsetY - y_on_start;\n\n            if (dx > $bar_progress.max_dx) {\n                dx = $bar_progress.max_dx;\n            }\n            if (dx < $bar_progress.min_dx) {\n                dx = $bar_progress.min_dx;\n            }\n\n            const $handle = bar.$handle_progress;\n            $.attr($bar_progress, 'width', $bar_progress.owidth + dx);\n            $.attr($handle, 'points', bar.get_progress_polygon_points());\n            $bar_progress.finaldx = dx;\n        });\n\n        $.on(this.$svg, 'mouseup', () => {\n            is_resizing = false;\n            if (!($bar_progress && $bar_progress.finaldx)) return;\n            bar.progress_changed();\n            bar.set_action_completed();\n        });\n    }\n\n    get_all_dependent_tasks(task_id) {\n        let out = [];\n        let to_process = [task_id];\n        while (to_process.length) {\n            const deps = to_process.reduce((acc, curr) => {\n                acc = acc.concat(this.dependency_map[curr]);\n                return acc;\n            }, []);\n\n            out = out.concat(deps);\n            to_process = deps.filter((d) => !to_process.includes(d));\n        }\n\n        return out.filter(Boolean);\n    }\n\n    get_snap_position(dx) {\n        let odx = dx,\n            rem,\n            position;\n\n        if (this.view_is(VIEW_MODE.WEEK)) {\n            rem = dx % (this.options.column_width / 7);\n            position =\n                odx -\n                rem +\n                (rem < this.options.column_width / 14\n                    ? 0\n                    : this.options.column_width / 7);\n        } else if (this.view_is(VIEW_MODE.MONTH)) {\n            rem = dx % (this.options.column_width / 30);\n            position =\n                odx -\n                rem +\n                (rem < this.options.column_width / 60\n                    ? 0\n                    : this.options.column_width / 30);\n        } else {\n            rem = dx % this.options.column_width;\n            position =\n                odx -\n                rem +\n                (rem < this.options.column_width / 2\n                    ? 0\n                    : this.options.column_width);\n        }\n        return position;\n    }\n\n    unselect_all() {\n        [...this.$svg.querySelectorAll('.bar-wrapper')].forEach((el) => {\n            el.classList.remove('active');\n        });\n    }\n\n    view_is(modes) {\n        if (typeof modes === 'string') {\n            return this.options.view_mode === modes;\n        }\n\n        if (Array.isArray(modes)) {\n            return modes.some((mode) => this.options.view_mode === mode);\n        }\n\n        return false;\n    }\n\n    get_task(id) {\n        return this.tasks.find((task) => {\n            return task.id === id;\n        });\n    }\n\n    get_bar(id) {\n        return this.bars.find((bar) => {\n            return bar.task.id === id;\n        });\n    }\n\n    show_popup(options) {\n        if (!this.popup) {\n            this.popup = new Popup(\n                this.popup_wrapper,\n                this.options.custom_popup_html\n            );\n        }\n        this.popup.show(options);\n    }\n\n    hide_popup() {\n        this.popup && this.popup.hide();\n    }\n\n    trigger_event(event, args) {\n        if (this.options['on_' + event]) {\n            this.options['on_' + event].apply(null, args);\n        }\n    }\n\n    /**\n     * Gets the oldest starting date from the list of tasks\n     *\n     * @returns Date\n     * @memberof Gantt\n     */\n    get_oldest_starting_date() {\n        return this.tasks\n            .map((task) => task._start)\n            .reduce((prev_date, cur_date) =>\n                cur_date <= prev_date ? cur_date : prev_date\n            );\n    }\n\n    /**\n     * Clear all elements from the parent svg element\n     *\n     * @memberof Gantt\n     */\n    clear() {\n        this.$svg.innerHTML = '';\n    }\n}\n\nGantt.VIEW_MODE = VIEW_MODE;\n\nfunction generate_id(task) {\n    return task.name + '_' + Math.random().toString(36).slice(2, 12);\n}\n"],"names":["YEAR","MONTH","DAY","HOUR","MINUTE","SECOND","MILLISECOND","month_names","en","es","ru","ptBr","fr","tr","zh","date_utils","parse","date","date_separator","time_separator","Date","date_parts","time_parts","parts","split","map","val","parseInt","vals","length","parseFloat","concat","to_string","with_time","TypeError","this","get_date_values","i","padStart","date_string","time_string","format","format_string","lang","values","d","format_map","YYYY","MM","DD","HH","mm","ss","SSS","D","MMMM","MMM","str","formatted_values","Object","keys","sort","a","b","forEach","key","includes","replace","push","value","diff","date_a","date_b","scale","milliseconds","seconds","hours","minutes","days","months","years","endsWith","Math","floor","today","slice","now","add","qty","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","start_of","scores","should_reset","_scale","clone","get_days_in_month","no_of_days","month","year","targetLength","padString","String","repeat","$","expr","con","document","querySelector","createSVG","tag","attrs","elem","createElementNS","attr","append_to","appendChild","innerHTML","setAttribute","animateSVG","svgElement","from","to","animatedSvgElement","dur","begin","animEl","attributeName","animateElement","calcMode","keyTimes","keySplines","cubic_bezier","getAnimationElement","event","createEvent","initEvent","eventName","dispatchEvent","name","ease","linear","on","element","selector","callback","delegate","bind","off","handler","removeEventListener","addEventListener","e","delegatedTarget","target","closest","call","matches","parentNode","getAttribute","Bar","constructor","gantt","task","set_defaults","prepare","draw","action_completed","prepare_values","prepare_helpers","invalid","height","options","bar_height","x","compute_x","y","compute_y","corner_radius","bar_corner_radius","duration","_end","_start","step","width","column_width","progress_width","progress","group","class","custom_class","id","bar_group","handle_group","SVGElement","prototype","getX","getY","getWidth","getHeight","getEndX","draw_bar","draw_progress_bar","draw_label","draw_resize_handles","$bar","rx","ry","classList","$bar_progress","requestAnimationFrame","update_label_position","bar","$handle_progress","points","get_progress_polygon_points","join","bar_progress","setup_click_event","popup_trigger","show_popup","unselect_all","trigger_event","bar_being_dragged","subtitle","language","target_element","title","update_bar_position","dependencies","dep","get_bar","reduce","prev","curr","update_attr","update_handle_position","update_progressbar_position","update_arrow_position","date_changed","changed","new_start_date","new_end_date","compute_start_end_date","Number","progress_changed","new_progress","compute_progress","set_action_completed","setTimeout","x_in_units","gantt_start","width_in_units","task_start","view_is","header_height","padding","_index","get_snap_position","dx","rem","position","odx","isNaN","label","getBBox","remove","handle","arrows","arrow","update","Arrow","from_task","to_task","calculate_path","start_x","condition","start_y","end_x","end_y","from_is_below_to","curve","arrow_curve","clockwise","curve_y","offset","path","down_1","down_2","left","Popup","parent","custom_html","make","hide","pointer","show","Error","html","style","clientWidth","position_meta","HTMLElement","getBoundingClientRect","top","transform","opacity","VIEW_MODE","QUARTER_DAY","HALF_DAY","WEEK","Gantt","wrapper","tasks","setup_wrapper","setup_options","setup_tasks","change_view_mode","bind_events","svg_element","wrapper_element","$svg","$container","createElement","parentElement","popup_wrapper","default_options","view_modes","view_mode","date_format","custom_popup_html","assign","start","end","every","deps","trim","filter","random","toString","generate_id","setup_dependencies","dependency_map","t","refresh","mode","update_view_scale","setup_dates","render","setup_gantt_dates","setup_date_values","gantt_end","dates","cur_date","bind_grid_click","bind_bar_events","clear","setup_layers","make_grid","make_dates","make_bars","make_arrows","map_arrows_on_bars","set_width","set_scroll_position","layers","layer","make_grid_background","make_grid_rows","make_grid_header","make_grid_ticks","make_grid_highlights","grid_width","grid_height","grid","rows_layer","lines_layer","row_width","row_height","row_y","x1","y1","x2","y2","tick_x","tick_y","tick_height","tick_class","get_dates_to_draw","lower_x","lower_y","lower_text","upper_text","$upper_text","upper_x","upper_y","last_date","get_date_info","date_text","Day_lower","Week_lower","Month_lower","Year_lower","Day_upper","Week_upper","Month_upper","Year_upper","base_pos","x_pos","bars","task_id","dependency","get_task","Boolean","cur_width","actual_width","parent_element","scroll_pos","get_oldest_starting_date","scrollLeft","hide_popup","is_dragging","x_on_start","y_on_start","is_resizing_left","is_resizing_right","parent_bar_id","bar_wrapper","contains","offsetX","offsetY","ids","get_all_dependent_tasks","ox","oy","owidth","finaldx","bind_bar_progress","is_resizing","min_dx","max_dx","$handle","out","to_process","acc","querySelectorAll","el","modes","Array","isArray","some","find","popup","args","apply","prev_date"],"mappings":"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"}